import React, { useState } from "react"

import {
  AuthorizeDeviceChooseMethodView,
  AuthorizeDeviceAllowOnceTokenView,
  AuthorizeDeviceAddDeviceFormView,
  AuthorizeDeviceAddDeviceTokenView,
  AuthorizeDeviceAddDeviceConfirmationView,
} from 'AuthorizeDevice/views'
import { AuthorizeDeviceState } from "./types"
import { getTokenInstruction, sendTokenCode } from 'api/token'

import { Loader } from "ui"
import { assertState } from "../lib/state-members"

interface AuthorizeDeviceProcessUnionProps {
  onSuccess: () => void
  onLogout: () => void
}

export const AuthorizeDeviceProcessUnion = (props: AuthorizeDeviceProcessUnionProps) => {
  const { onSuccess, onLogout } = props

  /**
   * ðŸ¤” czy loading jako osobna komÃ³rka stanu to dobry pomysÅ‚?
   * Gdyby to byÅ‚a osobna komÃ³rka, to technicznie moÅ¼liwe jest ustawienie np. loading=false & state.type="SOMETHING" - i wiadomo jakie bÄ™dÄ… konsekwencje. ByÅ‚by powrÃ³t do primitive obsession, czego nie chcemy
   * Zasadniczo, "loading" to stan naszej maszyny stanowej. WiÄ™c likwidujemy osobnÄ… komÃ³rkÄ™ na loading, tj. pozbywamy siÄ™ tego:
   *    const [isLoading, setLoading] = useState(false)
   */

  const [state, setState] = useState<AuthorizeDeviceState>({
    type: "CHOOSE_METHOD"
  })

  const cancelChoice = async () => {
    setState({ type: "CHOOSE_METHOD" })
  }

  const chooseAllowOnce = async () => {
    setState({ type: "LOADING" })
    // ðŸ¤” tu teÅ¼ potrzebny jest try..catch. Wprawdzie nie mamy osobnego ekranu, bo uÅ¼ytkownik _jeszcze_ nie wpisaÅ‚ nic do inputa - ale moÅ¼e byÄ‡ bÅ‚Ä…d techniczny (np. zawiÅ›nie API).
    // BÄ™dziemy to omawiali w module "ObsÅ‚uga bÅ‚Ä™dÃ³w"
    const tokenInstruction = await getTokenInstruction()
    setState({
      type: "ALLOW_ONCE_TOKEN",
      ...tokenInstruction,
      error: false,
    })
  }

  const submitAllowOnce = async (password: string) => {
    if (state.type !== "ALLOW_ONCE_TOKEN"){
      throw new Error(`Invalid State: ${state}`)
    }

    setState({ type: "LOADING" })
    try {
      // ðŸ¤” wprawdzie zmieniamy stan po drodze (loading powyÅ¼ej) ale stan sprzed zmiany zostaÅ‚ "domkniÄ™ty" (closure trzyma go w zmiennej `state`)
      // wiÄ™c state.tokenId ma poprawnÄ… wartoÅ›Ä‡. ALE jeÅ›li nie lubimy "stale closures" ktÃ³re podnoszÄ… poziom trudnoÅ›ci - moÅ¼emy zdestrukturyzowaÄ‡ stan i uÅ¼yÄ‡ prostej zmiennej dla tokena
      await sendTokenCode({ tokenId: state.tokenId, tokenCode: password })
      setState({ type: "ALLOW_ONCE_SUCCESS" })
      onSuccess()
    } catch (e: unknown) {
      setState({ ...state, error: true })
    }
  }

  const chooseAddDevice = async () => {
    setState({
      type: "ADD_DEVICE_FORM"
    })
  }

  const submitDeviceName = async (currentDeviceName: string) => {
    setState({ type: "LOADING" })
    // ðŸ¤” tu teÅ¼ potrzebny jest try..catch. Wprawdzie nie mamy osobnego ekranu, bo uÅ¼ytkownik _jeszcze_ nie wpisaÅ‚ nic do inputa - ale moÅ¼e byÄ‡ bÅ‚Ä…d techniczny (np. zawiÅ›nie API).
    // BÄ™dziemy to omawiali w module "ObsÅ‚uga bÅ‚Ä™dÃ³w"
    const tokenInstruction = await getTokenInstruction()
    setState({
      type: "ADD_DEVICE_TOKEN",
      deviceName: currentDeviceName,
      ...tokenInstruction,
      error: false,
    })
  }

  const resetToken = async () => {
    assertState(state, "ADD_DEVICE_TOKEN")
    setState({ type: "LOADING" })
    const tokenInstruction = await getTokenInstruction()
    setState(({ ...state, ...tokenInstruction, error: false }))
  }

  const submitAddDevice = async (password: string) => {
    // upewnijmy siÄ™, Å¼e jesteÅ›my w odpowiednim stanie, aby TS "pozwoliÅ‚" nam wejÅ›Ä‡ w odpowiednie pola stanu
    // rÄ™cznie:
    if (state.type !== "ADD_DEVICE_TOKEN"){
      throw new Error(`Invalid State: ${state}`)
    }
    // bardziej zwiÄ™Åºle:
    assertState<AuthorizeDeviceState['type']>(state, "ADD_DEVICE_TOKEN")

    setState({ type: "LOADING" })
    try {
      await sendTokenCode({ tokenId: state.tokenId, tokenCode: password })
      setState({
        type: "ADD_DEVICE_CONFIRMATION",
        deviceName: state.deviceName
      })
    } catch (e: unknown) {
      setState(({ ...state, error: true }))
    }
  }

  // ðŸ”¥ dla stanu finalnego - wybieramy 1 z rozwiÄ…zaÅ„:
  // - albo uÅ¼ywamy stanu LOGGED_OUT i zmiana stanu jest zsynchronizowana z callbackiem - plusem jest to Å¼e stan w pamiÄ™ci zawsze odzwsierciedla "stan faktyczny" i Å‚atwiej rozumieÄ‡ implementacjÄ™/debugowaÄ‡
  const handleLogout = () => {
    setState({ type: "LOGGED_OUT" })
    onLogout()
  }
  // - albo uÅ¼ywamy stanu LOGGED_OUT i callback onLogout jest _REAKCJÄ„_ na zmianÄ™ stanu (reactive) - plusem jest to Å¼e stan steruje wszystkim, nic siÄ™ nie dzieje " z boku"
  // useEffect(() => {
  //   if (state.type === "LOGGED_OUT"){
  //     onLogout()
  //   }
  // }, [state, onLogout])
  // - albo w ogÃ³le likwidujemy stan LOGGED_OUT - mamy mniej stanÃ³w, ale czÄ™Å›Ä‡ logiki jest state-unaware i potencjalnie trudniej moÅ¼e byÄ‡ rozumieÄ‡ implementacjÄ™/debugowaÄ‡
  // const handleLogout = onLogout // lub w ogÃ³le uÅ¼ywamy onLogout z propsa bezpoÅ›rednio, bez znaczenia
  // ðŸ”¥ nie istnieje jedno "idealne" podejÅ›cie ( Í¡Â° ÍœÊ– Í¡Â°) i w zaleÅ¼noÅ›ci od przypadku (wiÄ™kszy/mniejszy proces, bardziej/mniej skomplikowany, duÅ¼o/maÅ‚o danych, sÄ… dodatkowe side effecty lub nie ma, etc) bÄ™dziemy preferowali inne podejÅ›cia

  const handleSuccess = () => {
    setState({ type: "ADD_DEVICE_SUCCESS" })
    onSuccess()
  }
  // analogicznie jak handleLogout

switch(state.type){
  case "LOADING":
    return <Loader />

  case "CHOOSE_METHOD":
    return <AuthorizeDeviceChooseMethodView
      onAddDeviceToTrusted={chooseAddDevice}
      onAllowDeviceOnce={chooseAllowOnce}
      onLogout={handleLogout}
    />

  case "ALLOW_ONCE_TOKEN":
    return <AuthorizeDeviceAllowOnceTokenView
      onSubmit={submitAllowOnce}
      onCancel={cancelChoice}
      instruction={state.instruction}
      error={state.error}
    />

  case "ALLOW_ONCE_SUCCESS":
    return null

  case "ADD_DEVICE_FORM":
    return <AuthorizeDeviceAddDeviceFormView
      onSubmit={submitDeviceName}
    />

  case "ADD_DEVICE_TOKEN":
    return <AuthorizeDeviceAddDeviceTokenView
      deviceName={state.deviceName}
      instruction={state.instruction}
      onSubmit={submitAddDevice}
      onReset={resetToken}
      onCancel={cancelChoice}
      error={state.error}
    />

  case "ADD_DEVICE_CONFIRMATION":
    return <AuthorizeDeviceAddDeviceConfirmationView
      deviceName={state.deviceName}
      onClose={handleSuccess}
    />

  case "ADD_DEVICE_SUCCESS":
    return null

  case "LOGGED_OUT":
    return null

  default:
     /* eslint-disable-next-line */
    const leftover: never = state
    return null
  }
}
